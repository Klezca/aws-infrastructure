Description: >
    This template deploys a VPC, with a pair of public and private subnets spread
    across three Availability Zones. It deploys an Internet Gateway, with a default
    route on the public subnets, plus 1-2 NAT Gateways for the private ones.

    It then deploys an Aurora-mysql cluster, Redis cluster and EC2 instances with an Application Load Balancer at the front.

    This template handle HTTP to HTTPS redirect request at the application load balancer level and web server level.

Parameters:

    CertificateArn:
        Description: The AWS ARN of the SSL certificate to be used by the load balancer. arn:aws:CertificateID. Go to Certificate manager to copy and paste the ARN
        Type: String

    AuroraSnapshotArn:
        Description:  Leave Blank if N/A. The AWS ARN of the Aurora database backup which you want to start Aurora with. arn:aws:SnapshotID. Go to RDS to copy and paste the ARN
        Type: String
        Default: ""

    # This parameter has not being tested
    RedisBackupName:
        Description:  Leave Blank if N/A. The name of the backup you'll restore the redis cluster from.Go to elasticache Backups and copy and paste the Backup name.
        Type: String
        Default: ""

    # If you don't want to select the parameters all the time, then you can write a condition to evaluate to a value based on the Environment
    InstanceType:
        Default: t3a.micro
        Description: Web Server instance types
        Type: String
        # EC2 instance type: https://aws.amazon.com/ec2/instance-types/
        AllowedValues:
            - t3a.micro
            - t3a.medium
            - t3a.large
            - m5a.large # m5 are for general purpose computing

    DBInstanceSize:
        Description: DB instance size
        Type: String
        Default: db.t3.small
        # If you need more instance size: https://aws.amazon.com/rds/instance-types/
        AllowedValues:
            - db.t3.small
            - db.t3.medium # t3 are for workload where there are heavy usage in some period of time and no usage most of the time
            - db.r5.large # r5 are for memory heavy workload

    RedisType:
        Default: cache.t3.micro
        Description: Redis instance types to be used for Elasticache
        Type: String
        # Redis instance Type: https://aws.amazon.com/elasticache/pricing/
        AllowedValues:
            - cache.t3.micro
            - cache.t3.medium  # t3 are for workload where there are heavy usage in some period of time and no usage most of the time
            - cache.r5.large # r5 are for memory heavy workload

    InitialNumberofWebServer:
        Description: Number of EC2 instances to be initially deployed
        Type: Number
        Default: 1

    MaximumNumberofWebServer:
        Description: Add a maximum number of EC2 instances allowed to be deployed by Autoscaling group
        Type: Number
        Default: 2

    Environment:
        Description: Environment Type
        Type: String
        Default: Staging
        AllowedValues:
            - Staging
            - Prod
    DBName:
        Description: Aurora Database name
        Type: String

    DatabaseUsername:
        AllowedPattern: "[a-zA-Z0-9]+"
        ConstraintDescription: must contain only alphanumeric characters.
        Description: The database admin account user name.
        MaxLength: '16'
        MinLength: '1'
        Type: String

    KeyName:
        Description: The EC2 Key Pair to allow SSH access to the instances
        Type: AWS::EC2::KeyPair::KeyName
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
        Default: ""

    RedisAUTHtoken:
        AllowedPattern: "[a-zA-Z0-9]+"
        ConstraintDescription: must contain only alphanumeric characters.
        Description: Redis account AUTH token.
        MaxLength: '41'
        MinLength: '16'
        NoEcho: 'true'
        Type: String

    DatabasePassword:
        AllowedPattern: "[a-zA-Z0-9]+"
        ConstraintDescription: must contain only alphanumeric characters.
        Description: The database admin account password.
        MaxLength: '41'
        MinLength: '8'
        NoEcho: 'true'
        Type: String

    # CloudFrontOAI:
    #     Description: CloudFront Origin Access Identity
    #     Type: String

    # BaseUrl:
    #     Description: Second level domain name for your application (for example laravelaws.com)
    #     Type: String

    # MailDriver:
    #     Description: Mail driver (smtp or log)
    #     Type: String
    #     Default: log

    # MailHost:
    #     Description: SMTP host
    #     Type: String
    #     Default: ""

    # MailPort:
    #     Description: SMTP port
    #     Type: String
    #     Default: ""

    # MailUsername:
    #     Description: SMTP password
    #     Type: String
    #     Default: ""

    # MailPassword:
    #     Description: SMTP password
    #     Type: String
    #     Default: ""


  # ALTERNATIVE CONFIGURATION. See Storage stack for current configuration.

    # DatabaseBackupRetentionPeriod:
    #     Type: Number
    #     Default: 7
    #     Description: The number of days that ElastiCache and Aurora retains automatic snapshots before deleting them.

    # PreferredBackupWindow:
    #     Description: 'The time range (in UTC) when ElastiCache and Aurora  takes a daily snapshot of your node group.'
    #     Type: String
    #     Default: '05:00-09:00'
    #     AllowedPattern: '\d{2}:\d{2}-\d{2}:\d{2}'
    #     ConstraintDescription: 'must be a valid timestamp range, for example 05:00-09:00'

    # PreferredMaintenanceWindow:
    #     Description: 'The weekly time range during which system maintenance can occur.
    #     Use the following format to specify a time range: ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC).'
    #     Type: String
    #     Default: 'sun:22:00-sun:23:30'
    #     AllowedPattern: '(mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}-(mon|tue|wed|thu|fri|sat|sun):\d{2}:\d{2}'
    #     ConstraintDescription: 'must be a valid timestamp range with day of week, for example sun:22:00-sun:23:30'

Conditions:
    CreateStagingResources: !Equals [!Ref Environment, Staging]
    CreateProdResources: !Equals [!Ref Environment, Prod]

Resources:

    # If you want more granular control, then you can add a UpdateReplacePolicy/ deletion policy to the resources in the stack individually
    VPC:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
            TemplateURL: https://cloudformation-template-treiner.s3.amazonaws.com/template/vpc.yaml
            Parameters:
                EnvironmentName:    !Ref Environment
                VpcCIDR:            !If [CreateStagingResources, 10.0.0.0/16, 10.1.0.0/16]
                PublicSubnet1CIDR:  !If [CreateStagingResources, 10.0.32.0/19, 10.1.32.0/19]
                PublicSubnet2CIDR:  !If [CreateStagingResources, 10.0.96.0/19, 10.1.96.0/19]
                PublicSubnet3CIDR:  !If [CreateStagingResources, 10.0.160.0/19, 10.1.160.0/19]
                PrivateSubnet1CIDR: !If [CreateStagingResources, 10.0.0.0/19, 10.1.0.0/19]
                PrivateSubnet2CIDR: !If [CreateStagingResources, 10.0.64.0/19, 10.1.64.0/19]
                PrivateSubnet3CIDR: !If [CreateStagingResources, 10.0.128.0/19, 10.1.128.0/19]

    Storage:
        Type: AWS::CloudFormation::Stack
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        DependsOn: VPC
        Properties:
            TemplateURL: https://cloudformation-template-treiner.s3.amazonaws.com/template/storage.yaml
            Parameters:
                EnvironmentName: !Ref Environment
                DatabaseInstanceType: !Ref DBInstanceSize
                DatabasePassword: !Ref DatabasePassword
                DatabaseUsername: !Ref DatabaseUsername
                DatabaseSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                DatabaseSecurityGroup: !GetAtt VPC.Outputs.DBSecurityGroup
                RedisSecurityGroup: !GetAtt VPC.Outputs.RedisSecurityGroup
                DatabaseName: !Ref DBName
                RedisAUTHtoken: !Ref RedisAUTHtoken
                AuroraSnapshotArn: !Ref AuroraSnapshotArn
                RedisBackupName: !Ref RedisBackupName
                RedisType: !Ref RedisType
                # DatabaseBackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
                # PreferredBackupWindow: !Ref PreferredBackupWindow
                # PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow

    Webserver:
        Type: AWS::CloudFormation::Stack
        DependsOn: Storage
        Properties:
            TemplateURL: https://cloudformation-template-treiner.s3.amazonaws.com/template/webserver.yaml
            Parameters:
                EnvironmentName: !Ref Environment
                VPC: !GetAtt VPC.Outputs.VPC
                PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
                PublicSubnets: !GetAtt VPC.Outputs.PublicSubnets
                InstanceType: !Ref InstanceType
                LBSecurityGroup: !GetAtt VPC.Outputs.LoadBalancerSecurityGroup
                EC2SecurityGroup: !GetAtt VPC.Outputs.EC2SecurityGroup
                KeyName: !Ref KeyName
                InitialNumberofWebServer: !Ref InitialNumberofWebServer
                MaximumNumberofWebServer: !Ref MaximumNumberofWebServer
                RedisClusterEndpoint: Storage.Outputs.RedisClusterEndpointAddress
                CertificateArn: !Ref CertificateArn


  # If you want to put Cloudfront in front the application load balancer to act as a Content Delivery Network,
  # to deliver dynamic (Laravel app hosted in EC2 instances ) and static content (images or videos in S3 buckets),
  # then you can create another stack dedicated to cloudfront to create the following architecture:
  #
  #   Reference: https://aws.amazon.com/blogs/startups/how-to-accelerate-your-wordpress-site-with-amazon-cloudfront/

    # ContentDelivery:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/s3bucketname/cdn.yaml
    #         Parameters:


  # AWS already prevent DDOS attack by default with AWS Shield Standard.
  # You can block ip ranges from a specific country, Rogue IPs and prevent SQL injection if you want extra security with AWS WAF, or
  # block ip and ip ranges using AWS Network ACL
  #
  #  Reference: https://youtu.be/IMxImFoVpmI?t=1170
  # 
    # WebApplicationFirewall:
    #     Type: AWS::CloudFormation::Stack
    #     Properties:
    #         TemplateURL: https://s3.amazonaws.com/s3bucketname/waf.yaml
    #         Parameters:
